#!/usr/bin/env bash
#
# open vim on a 9p file
# - read the file locally to a temp file
# - edit
# - write the file back to the same location on 9p
#
# 9p rdwr mode should work, but probably needs ':w!tee' to write?
# - or probably not since it's a muxed stream, see socat...
# socat+9p rdwr w/pipe+exec continuously reads/rewrites the remote
# vipe from moreutils may work? but, perl. http://joeyh.name/code/moreutils/
# should this be "edit9p"?
# probably need a trap to remove tempfile in failexit? no.
#

set -eu
set -o pipefail

# turn off history expansion for '!' - equivalent?
set +H
set +o histexpand

: ${vim9pdebug:="false"}
: ${ninepcmd:="9p"}
: ${ninepargs:=""}
: ${vimcmd:="vim"}
: ${vimargs:=""}
: ${rmtempfile:="false"}

scriptname="$(basename $(realpath "${BASH_SOURCE[0]}"))"

function failexit() {
  echo "${scriptname}: failure: ${@}"
  exit 1
}

for c in "${ninepcmd## *}" "${vimcmd## *}" sha256sum ; do
  command -v "${c}" &>/dev/null || failexit "${c} not found"
done

function checkdebug() {
  test "${vim9pdebug}" == "true"
}

function debugecho() {
  checkdebug && echo "${@}" | tr -s ' ' 1>&2 || true
}

if [[ ${#} == 0 ]] ; then
  debugecho "args: args is empty, just starting vim"
  vim
  exit ${?}
fi

declare -a args=()
for ((i=0;${#}>0;i++)) ; do args["${i}"]="${1}" ; shift ; done
for ((i=0;i<${#args[${i}]};i++)) ; do debugecho "args[${i}]: ${args[$i]}" ; done ;

declare -i lastarg="((${#args[@]}-1))"
debugecho "lastarg: ${lastarg}"

if [[ ! "${args[${lastarg}]}" =~ !*! ]] ; then
  debugecho "args: last arg does not contain a 9p address, starting vim"
  vim "${args[@]}"
  exit ${?}
fi

declare ninepuri="${args[${lastarg}]}"
debugecho "ninepuri: ${ninepuri}"

declare ninepaddr="${ninepuri%:*}"
ninepaddr="${ninepaddr#9p://}"
ninepaddr="${ninepaddr#9P://}"
debugecho "ninepaddr: ${ninepaddr}"

declare ninepfile="${ninepuri##*:}"
debugecho "ninepfile: ${ninepfile}"

declare tempfile="$(mktemp)"
debugecho "tempfile: ${tempfile}"
debugecho "tempfile: replacing ${args[${lastarg}]} with ${tempfile} to pass to vim"
args[${lastarg}]="${tempfile}"

debugecho "9p read cmdline: ${ninepcmd} ${ninepargs} -a ${ninepaddr} read ${ninepfile}"
"${ninepcmd}" ${ninepargs} -a "${ninepaddr}" read "${ninepfile}" > "${tempfile}" || failexit "could not read ${ninepuri} to ${tempfile}"
debugecho "read: successfully read ${ninepuri} to ${tempfile}"

# compare this so we're not unnecessarily writing across the network
osha256sum="$(sha256sum ${tempfile} | awk '{print $1}')"
debugecho "tempfile: original sha-256 sum ${osha256sum}"

debugecho "vim cmdline: ${vimcmd} ${vimargs} ${args[@]}"
"${vimcmd}" ${vimargs} ${args[@]} || failexit "vim exited with non-zero status"
debugecho "vim: exited cleanly"

nsha256sum="$(sha256sum ${tempfile} | awk '{print $1}')"
debugecho "tempfile: new sha-256 sum ${nsha256sum}"

debugecho "tempfile: comparing stored sha-256 sums"
debugecho "tempfile: old ${osha256sum}"
debugecho "tempfile: new ${nsha256sum}"

if [[ "${osha256sum}" == "${nsha256sum}" ]] ; then
  echo "${scriptname}: ${tempfile} unchanged, not rewriting to ${ninepuri}" 1>&2
  exit 0
fi

debugecho "9p write cmdline: ${ninepcmd} ${ninepargs} -a ${ninepaddr} write ${ninepfile}"
"${ninepcmd}" ${ninepargs} -a "${ninepaddr}" write "${ninepfile}" < "${tempfile}" || failexit "could not from ${tempfile} to ${ninepuri}"
debugecho "write: successfully wrote ${tempfile} to ${ninepuri}"

if [[ "${rmtempfile}" == "true" ]] ; then
  debugecho "rmtempfile: true, removing ${tempfile}"
  rm -f "${tempfile}" || failexit "could not remove ${tempfile}"
else
  debugecho "rmtempfile: not removing ${tempfile}"
fi
